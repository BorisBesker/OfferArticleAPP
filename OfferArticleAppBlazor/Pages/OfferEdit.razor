@page "/offers/{Id:int}"
@using OfferArticleAppBlazor.Components
@using OfferArticleAppBlazor.Models
@using OfferArticleAppBlazors.Models
@using static OfferArticleAppBlazor.Components.ArticlesGrid
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Offer Details</h3>
@if (offer == null)
{
    <p>Loading...</p>
}
else
{
    <div class="mb-3">
        <strong>Offer ID:</strong> @offer.Id
        <strong class="ms-3">Date:</strong> @offer.Date.ToShortDateString()
    </div>
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="AddNewRow">Add New Row</button>
    </div>
    <ArticlesGrid 
        Rows="@tableRows" 
        AllowRemove="true"
        OnRowRemoved="@RemoveRow"
        ProductSelectionTemplate="@ProductSelectionTemplate"
    />

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }

    <div class="mt-3">
        <button class="btn btn-success" 
                @onclick="UpdateOffer" 
                disabled="@(!IsFormValid())">
            Update Offer
        </button>
    </div>
}
@code {
    [Parameter]
    public int Id { get; set; }
    private OfferIdDto? offer;
    private List<TableRowModel> tableRows = new();
    private ArticleIdDto[]? articles;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        offer = await Http.GetFromJsonAsync<OfferIdDto>($"/api/offers/{Id}");
        articles = await Http.GetFromJsonAsync<ArticleIdDto[]>("/api/articles");
        
        // Convert existing offer items to editable rows
        tableRows = ConvertToTableRows(offer.ArticleOfferItems);
    }

    // Convert ArticleOfferItemDto to TableRowModel
    private List<TableRowModel> ConvertToTableRows(List<ArticleOfferItemDto> offerItems)
    {
        return offerItems.Select(item => new TableRowModel
        {
            Article = new ArticleIdDto 
            { 
                Id = item.ArticleId, 
                ArticleName = item.ArticleName,
                Price = item.UnitPrice
            },
            UnitPrice = item.UnitPrice,
            Quantity = (int)item.Quantity
        }).ToList();
    }

    private void AddNewRow()
    {
        tableRows.Add(new TableRowModel());
        StateHasChanged();
    }

    // Define the RenderFragment for product selection
    private RenderFragment<TableRowModel> ProductSelectionTemplate => 
        (row) => __builder =>
        {
            <select class="form-select" value="@(row.Article?.Id)" @onchange="@(e => OnProductSelected(e, row))">
                <option value="">Select a product...</option>
                @foreach (var article in articles)
                {
                    <option value="@article.Id">@article.ArticleName</option>
                }
            </select>
        };

    private void OnProductSelected(ChangeEventArgs e, TableRowModel row)
    {
        if (int.TryParse(e.Value?.ToString(), out int selectedId))
        {
            var selectedArticle = articles?.FirstOrDefault(a => a.Id == selectedId);
            if (selectedArticle != null)
            {
                row.Article = selectedArticle;
                row.UnitPrice = selectedArticle.Price; // Set initial price from article
                StateHasChanged();
            }
        }
    }

    private void RemoveRow(TableRowModel row)
    {
        tableRows.Remove(row);
        StateHasChanged();
    }

    private bool IsFormValid()
    {
        return tableRows.Any() && 
               tableRows.All(row => 
                   row.Article?.Id > 0 && 
                   row.Quantity > 0 && 
                   row.UnitPrice > 0);
    }

    private async Task UpdateOffer()
    {
        errorMessage = string.Empty;

        var offerDto = new OfferDto
        {
            ArticleOfferItems = tableRows.Select(row => new UpdateOrCreateArticleOfferItemDto
            {
                ArticleId = row.Article!.Id,
                UnitPrice = row.UnitPrice!.Value,
                Quantity = row.Quantity
            }).ToList()
        };

        try 
        {
            var response = await Http.PutAsJsonAsync($"/api/offers/{Id}", offerDto);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/");
            }
            else 
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to update offer: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}